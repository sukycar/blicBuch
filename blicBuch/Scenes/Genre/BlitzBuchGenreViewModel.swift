//
//  BlitzBuchGenreViewModel.swift
//  blitzBuch
//
//  Created by Vladimir Sukanica on 28.8.21..
//  Copyright (c) 2021 Upgrade Technology DOO. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol BlitzBuchGenreViewModelProtocol {
    var books: [Book]? { get set }
    var genre: Book.Genre? { get set }
    var lockedBooks: [String]? { get set }
    var booksFetched: Dynamic<Bool> { get set }
    var userDefaults: BlitzBuchUserDefaults { get set }
    
    func fetchGenreBooks()
}

class BlitzBuchGenreViewModel: BaseViewModel, BlitzBuchGenreViewModelProtocol {
    
    // MARK: - BlitzBuchGenreViewModelProtocol Vars & Lets
    
    var books: [Book]?
    var genre: Book.Genre?
    var lockedBooks: [String]?
    var booksFetched: Dynamic<Bool>
    var userDefaults: BlitzBuchUserDefaults

    // MARK: - Init
    
    init(genre: Book.Genre) {
        self.genre = genre
        self.booksFetched = Dynamic(false)
        self.userDefaults = BlitzBuchUserDefaults(userDefaults: UserDefaults.standard)
        super.init()
    }
    
    // MARK: - BlitzBuchGenreViewModelProtocol Methods
    
    func fetchGenreBooks(){
        let context = DataManager.shared.context
        let fetchRequest = Book.fetchRequest() as NSFetchRequest
        self.isLoaderHidden.value = false
        if let genre = genre {
            let genreString = genre.title
            let predicate = NSPredicate(format: "genre == %@", genreString)
            fetchRequest.predicate = predicate
            do {
                self.isLoaderHidden.value = true
                self.books = try context?.fetch(fetchRequest) as! [Book]
                self.booksFetched.value = true
            } catch let err as NSError {
                self.isLoaderHidden.value = false
                self.error.value = .general(AlertMessage(title: "", body: err.localizedDescription))
            }
        }
    }
    
}
