//
//  BlitzBuchVipViewController.swift
//  blitzBuch
//
//  Created by Vladimir Sukanica on 17.7.21..
//  Copyright (c) 2021 Vladimir Sukanica. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol BlitzBuchVipViewControllerProtocol: AnyObject {
    
}

class BlitzBuchVipViewController: BaseViewController, BlitzBuchVipViewControllerProtocol {
    
    // MARK: - Vars & Lets
    
    private var customView: BlitzBuchVipView! {
        loadViewIfNeeded()
        return view as? BlitzBuchVipView
    }
    var viewModel: (BaseViewModel & BlitzBuchVipViewModelProtocol)?
    var disposeBag = DisposeBag()
    
    // MARK: - Controller lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.customView.setup(target: self,
                              tableViewDelegate: self,
                              tableViewDataSource: self,
                              title: "VIP")
        self.viewModel?.getVipBooks()
        self.bindViewModel()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        self.disposeBag = DisposeBag()
    }
    
    // MARK: - Private methods
    
    private func bindViewModel() {
        self.viewModel?.error.bind( {[weak self] in
            if let error = $0 {
                self?.handleError(error: error)
            }
        })
        self.viewModel?.isLoaderHidden.bind({ [weak self] in
            self?.shouldHideLoader(isHidden: $0)
        })
        self.viewModel?.vipBooks.bind({ [weak self] _ in
            self?.customView.tableView.reloadData()
        })
    }
    
    private func addBookToCart(indexPath: IndexPath) {
        if let model = self.viewModel?.vipBooks.value[indexPath.row] {
        if let user = self.viewModel?.userDefaults.getUser() {
            UsersService.getCartBooks(userId: user.id ?? 0).subscribe { (cartBooks) in
                user.cartItems = ""
                var userCartBooks = String()
                cartBooks.forEach({ book in
                    userCartBooks.append("\(book),")
                })
                if userCartBooks.last == "," {
                    userCartBooks.removeLast()
                }
                user.cartItems = userCartBooks
                self.viewModel?.userDefaults.saveUser(user)
                var cartItems = user.cartItems
                self.navigationController?.view.startActivityIndicator()
                BooksService.checkLock(bookId: model.id).subscribe { (locked) in
                    if locked == true {
                        if !(cartItems?.contains(String(model.id)) ?? false) {
                            self.getAlert(errorString: NSLocalizedString("Book is already reserved", comment: ""), errorColor: Colors.orange)
                        } else {
                            self.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                        }
                    } else {
                        if model.vip == true {
                            guard let id = user.id else {return}
                            UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                let vip = vip
                                let regular = regular
                                if vip > 0 {
                                    self.updateVipBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: self.disposeBag)
                                    if !(cartItems?.contains(String(model.id)) ?? false) {
                                        user.numberOfRegularBooks = regular
                                        self.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""), errorColor: Colors.blueDefault)
                                        model.locked = LockStatus.locked.rawValue
                                        cartItems?.append(String(model.id))
                                        BooksService.lockBook(bookId: model.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                            let lockedBookId = (String(model.id))
                                            self?.lockedBooks.append(lockedBookId)
                                            var cartBooks = [String]()
                                            user.cartItems?.components(separatedBy: ",").forEach({ component in
                                                cartBooks.append(component)
                                            })
                                            cartBooks.append(lockedBookId)
                                            var newCartBooks = cartBooks
                                            newCartBooks = Array(Set(newCartBooks))
                                            let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                            var cartItemsCleared = String()
                                            clearBooksArray.forEach({ item in
                                                cartItemsCleared.append("\(item),")
                                            })
                                            if cartItemsCleared.last == "," {
                                                cartItemsCleared.removeLast()
                                            }
                                            user.cartItems = cartItemsCleared
                                            self?.viewModel?.userDefaults.saveUser(user)
                                            UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                //
                                            } onError: { (error) in
                                                self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                            } onCompleted: {
                                                //
                                            }.disposed(by: self?.disposeBag ?? DisposeBag())
                                            
                                        } onError: { (error) in
                                            self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                        } onCompleted: {
                                            //
                                        } onDisposed: {
                                            //
                                        }.disposed(by: self.disposeBag)
                                    } else {
                                        self.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                    }
                                    
                                } else {
                                    if (cartItems?.contains(String(model.id)) ?? false) {
                                        self.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                    } else {
                                        self.getAlert(errorString: NSLocalizedString("You have used the limit for vip books", comment: ""), errorColor: Colors.orange)
                                    }
                                }
                                
                            } onError: { (error) in
                                self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                            } onCompleted: {
                                //
                            } onDisposed: {
                                //
                            }.disposed(by: self.disposeBag)
                        }
                        if model.vip == false {
                            guard let id = user.id else {return}
                            UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                let regular = regular
                                if regular > 0 {
                                    self.updateBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: self.disposeBag)
                                    if !(cartItems?.contains(String(model.id)) ?? false) {
                                        user.numberOfRegularBooks = regular
                                        self.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""),
                                                       errorColor: Colors.blueDefault)
                                        model.locked = LockStatus.locked.rawValue
                                        cartItems?.append("\(String(model.id)),")
                                        BooksService.lockBook(bookId: model.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                            let lockedBookId = (String(model.id))
                                            self?.lockedBooks.append(lockedBookId)
                                            var cartBooks = [String]()
                                            user.cartItems?.components(separatedBy: ",").forEach({ component in
                                                cartBooks.append(component)
                                            })
                                            cartBooks.append(lockedBookId)
                                            var newCartBooks = cartBooks
                                            newCartBooks = Array(Set(newCartBooks))
                                            let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                            var cartItemsCleared = String()
                                            clearBooksArray.forEach({ item in
                                                cartItemsCleared.append("\(item),")
                                            })
                                            if cartItemsCleared.last == "," {
                                                cartItemsCleared.removeLast()
                                            }
                                            user.cartItems = cartItemsCleared
                                            self?.viewModel?.userDefaults.saveUser(user)
                                            UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                //
                                            } onError: { (error) in
                                                self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                            } onCompleted: {
                                                //
                                            }.disposed(by: self?.disposeBag ?? DisposeBag())
                                            
                                        } onError: { (error) in
                                            self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                        } onCompleted: {
                                            //
                                        } onDisposed: {
                                            //
                                        }.disposed(by: self.disposeBag)
                                    } else {
                                        self.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                    }
                                } else {
                                    if (cartItems?.contains(String(model.id)) ?? false) {
                                        self.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                    } else {
                                        self.getAlert(errorString: NSLocalizedString("You have used the limit for regular books", comment: ""), errorColor: Colors.orange)
                                    }
                                }
                            } onError: { (error) in
                                self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                            } onCompleted: {
                                //
                            } onDisposed: {
                                //
                            }.disposed(by: self.disposeBag)
                        }
                    }
                    self.navigationController?.view.stopActivityIndicator()
                } onError: { (error) in
                    self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                } onCompleted: {
                    //
                } onDisposed: {
                    //
                }.disposed(by: self.disposeBag)
                
                do {
                    try DataManager.shared.context.save()
                } catch {
                    self.getAlert(errorString: "Error saving data", errorColor: Colors.orange)
                }
            } onError: { (error) in
                self.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
            } onCompleted: {
                //
            } onDisposed: {
                //
            }.disposed(by: self.disposeBag)
        }
    }
    }
}
    
// MARK: - UITableViewDelegate, UITableViewDataSource

extension BlitzBuchVipViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.viewModel?.vipBooks.value.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let item = self.viewModel?.vipBooks.value[indexPath.row] {
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: BookTableViewCell.self), for: indexPath) as! BookTableViewCell
            cell.set(with: item, inVipController: true)
            cell.indexPath = indexPath
            cell.cellDelegate = self
            cell.delegate = self
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableView.estimatedRowHeight
    }
}

extension BlitzBuchVipViewController {
    @objc func presentLoginView(){
        let vc = LoginViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
    
    @objc func presentRegisterView(){
        let vc = RegisterViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
}

extension BlitzBuchVipViewController: AlertMe {
    func onClick() {
    }
    
    func onLoggedOutClick() {
        let alertVC = self.alertService.alert()
        self.present(alertVC, animated: true)
    }
}

extension BlitzBuchVipViewController: SelectedBookDelegate {
    func bookSelected(indexPath: IndexPath) {
        self.addBookToCart(indexPath: indexPath)
    }
}

