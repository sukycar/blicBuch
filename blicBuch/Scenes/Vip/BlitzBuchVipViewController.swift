//
//  BlitzBuchVipViewController.swift
//  blitzBuch
//
//  Created by Vladimir Sukanica on 17.7.21..
//  Copyright (c) 2021 Vladimir Sukanica. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BlitzBuchVipViewControllerProtocol: AnyObject {
    
}

class BlitzBuchVipViewController: BaseViewController, BlitzBuchVipViewControllerProtocol {
    
    // MARK: - Vars & Lets
    
    private var customView: BlitzBuchVipView! {
        loadViewIfNeeded()
        return view as? BlitzBuchVipView
    }
    var viewModel: (BaseViewModel & BlitzBuchVipViewModelProtocol)?
    
    // MARK: - Controller lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.customView.setup(target: self,
                              tableViewDelegate: self,
                              tableViewDataSource: self,
                              title: "VIP")
        self.viewModel?.getVipBooks()
        self.bindViewModel()
    }
    
    // MARK: - Private methods
    
    private func bindViewModel() {
        self.viewModel?.error.bind( {[weak self] in
            if let error = $0 {
                self?.handleError(error: error)
            }
        })
        self.viewModel?.isLoaderHidden.bind({ [weak self] in
            self?.shouldHideLoader(isHidden: $0)
        })
        self.viewModel?.vipBooks.bind({ [weak self] _ in
            self?.customView.tableView.reloadData()
        })
    }
    
}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension BlitzBuchVipViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.viewModel?.vipBooks.value.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let item = self.viewModel?.vipBooks.value[indexPath.row] {
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: BookTableViewCell.self), for: indexPath) as! BookTableViewCell
            cell.set(with: item, inVipController: true)
            cell.cellDelegate = self
            cell.orderButton.rx.tap.subscribe(onNext: {[weak self] in
                if let logedIn = blitzBuchUserDefaults.get(.logedIn) as? Bool{
                    var cartItems = blitzBuchUserDefaults.get(.cartItems) as? [String]
                    if logedIn == true {
                        //                    let request = CartBook.fetchRequest() as NSFetchRequest
                        //                    request.predicate = NSPredicate(format: "id == %d", item.id)
                        //                    let fetchedCartBooks = try! DataManager.shared.context.fetch(request)
                        //                    let cartBook = fetchedCartBooks.first
                        self?.navigationController?.view.startActivityIndicator()
                        BooksService.checkLock(bookId: item.id).subscribe { (locked) in
                            if locked == true {
                                if !(cartItems?.contains(String(item.id)) ?? false) {
                                    self?.getAlert(errorString: NSLocalizedString("Book is already reserved", comment: ""), errorColor: Colors.orange)
                                } else {
                                    self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                }
                            } else {
                                if item.vip == true {
                                    guard let id = blitzBuchUserDefaults.get(.id) as? Int32 else {return}
                                    UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                        let vip = vip
                                        let regular = regular
                                        if vip > 0 {
                                            self?.updateVipBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: cell.disposeBag)
                                            if !(cartItems?.contains(String(item.id)) ?? false) {
                                                _ = blitzBuchUserDefaults.set(.numberOfRegularBooks, value: regular)
                                                self?.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""), errorColor: Colors.blueDefault)
                                                item.locked = LockStatus.locked.rawValue
                                                cartItems?.append(String(item.id))
                                                BooksService.lockBook(bookId: item.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                                    let lockedBookId = (String(item.id))
                                                    self?.lockedBooks.append(lockedBookId)
                                                    var cartBooks = blitzBuchUserDefaults.get(.cartItems) as? [String] ?? [""]
                                                    cartBooks.append(lockedBookId)
                                                    var newCartBooks = cartBooks
                                                    newCartBooks = Array(Set(newCartBooks))
                                                    let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                                    _ = blitzBuchUserDefaults.set(.cartItems, value: clearBooksArray) as! [String]
                                                    UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                        //
                                                    } onError: { (error) in
                                                        self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                    } onCompleted: {
                                                        //
                                                    }.disposed(by: cell.disposeBag)
                                                    
                                                } onError: { (error) in
                                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                } onCompleted: {
                                                    //
                                                } onDisposed: {
                                                    //
                                                }.disposed(by: cell.disposeBag)
                                            } else {
                                                self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                            }
                                            
                                        } else {
                                            if (cartItems?.contains(String(item.id)) ?? false) {
                                                self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                            } else {
                                                self?.getAlert(errorString: NSLocalizedString("You have used the limit for vip books", comment: ""), errorColor: Colors.orange)
                                            }
                                        }
                                        
                                        
                                        
                                    } onError: { (error) in
                                        self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                    } onCompleted: {
                                        //
                                    } onDisposed: {
                                        //
                                    }.disposed(by: cell.disposeBag)
                                }
                                if item.vip == false {
                                    guard let id = blitzBuchUserDefaults.get(.id) as? Int32 else {return}
                                    UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                        let vip = vip
                                        let regular = regular
                                        if regular > 0 {
                                            self?.updateBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: cell.disposeBag)
                                            if !(cartItems?.contains(String(item.id)) ?? false) {
                                                _ = blitzBuchUserDefaults.set(.numberOfRegularBooks, value: regular)
                                                self?.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""), errorColor: Colors.blueDefault)
                                                item.locked = LockStatus.locked.rawValue
                                                //                                                cartBook?.inCart = true
                                                cartItems?.append(String(item.id))
                                                BooksService.lockBook(bookId: item.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                                    let lockedBookId = (String(item.id))
                                                    self?.lockedBooks.append(lockedBookId)
                                                    var cartBooks = blitzBuchUserDefaults.get(.cartItems) as? [String] ?? [""]
                                                    cartBooks.append(lockedBookId)
                                                    var newCartBooks = cartBooks
                                                    newCartBooks = Array(Set(newCartBooks))
                                                    let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                                    _ = blitzBuchUserDefaults.set(.cartItems, value: clearBooksArray) as! [String]
                                                    UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                        //
                                                    } onError: { (error) in
                                                        self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                    } onCompleted: {
                                                        //
                                                    }.disposed(by: cell.disposeBag)
                                                } onError: { (error) in
                                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                } onCompleted: {
                                                    //
                                                } onDisposed: {
                                                    //
                                                }.disposed(by: cell.disposeBag)
                                            } else {
                                                self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                            }
                                            
                                        } else {
                                            if (cartItems?.contains(String(item.id)) ?? false) {
                                                self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                            } else {
                                                self?.getAlert(errorString: NSLocalizedString("You have used the limit for regular books", comment: ""), errorColor: Colors.orange)
                                            }
                                        }
                                        
                                        
                                        
                                    } onError: { (error) in
                                        self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                    } onCompleted: {
                                        //
                                    } onDisposed: {
                                        //
                                    }.disposed(by: cell.disposeBag)
                                }
                            }
                            self?.navigationController?.view.stopActivityIndicator()
                        } onError: { (error) in
                            self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                        } onCompleted: {
                            //
                        } onDisposed: {
                            //
                        }.disposed(by: cell.disposeBag)
                        
                        do {
                            try DataManager.shared.context.save()
                        } catch {
                            self?.getAlert(errorString: "Error saving data", errorColor: Colors.orange)
                        }
                    } else {
                        self?.onClick()
                    }
                }
            }).disposed(by: cell.disposeBag)
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableView.estimatedRowHeight
    }
}

extension BlitzBuchVipViewController {
    @objc func presentLoginView(){
        let vc = LoginViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
    
    @objc func presentRegisterView(){
        let vc = RegisterViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
}

extension BlitzBuchVipViewController: AlertMe {
    func onClick() {
    }
    
    func onLoggedOutClick() {
        let alertVC = self.alertService.alert()
        self.present(alertVC, animated: true)
    }
}

