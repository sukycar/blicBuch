//
//  BlitzBuchSearchViewController.swift
//  blitzBuch
//
//  Created by Vladimir Sukanica on 17.7.21..
//  Copyright (c) 2021 Vladimir Sukanica. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BlitzBuchSearchViewControllerProtocol: AnyObject {
    
}

class BlitzBuchSearchViewController: BaseViewController, BlitzBuchSearchViewControllerProtocol {
    
    // MARK: - Vars & Lets
    
    private var customView: BlitzBuchSearchView! {
        loadViewIfNeeded()
        return view as? BlitzBuchSearchView
    }
    var viewModel: (BaseViewModel & BlitzBuchSearchViewModelProtocol)?
    
    // MARK: - Controller lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.presentLoginView), name: LoginNotificationName, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.presentRegisterView), name: RegisterNotificationName, object: nil)
        self.viewModel?.fetch()
        self.viewModel?.fetchRecommendedBooks()
        self.customView.searchTable.reloadData()
        self.customView.setup(target: self,
                              tableViewDelegate: self,
                              tableViewDataSource: self,
                              searchBarDelegate: self,
                              searchBarClearButtonSelector: #selector(self.resignKeyboard))
        self.bindViewModel()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.viewModel?.fetch()
        self.viewModel?.fetchRecommendedBooks()
        if let viewModel = self.viewModel {
            viewModel.fetch()
            viewModel.fetchRecommendedBooks()
            viewModel.mainFilteredData.value = viewModel.dataSource.value
            viewModel.filteredDataSource.value = viewModel.weRecommend.value
        }
    }
    
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    // MARK: - Private methods
    
    private func bindViewModel() {
        self.viewModel?.error.bind({ [weak self] in
            if let error = $0 {
            self?.handleError(error: error)
            }
        })
        self.viewModel?.isLoaderHidden.bind({ [weak self] in
            self?.shouldHideLoader(isHidden: $0)
        })
        self.viewModel?.dataSource.bind({ [weak self] _ in
            self?.customView.searchTable.reloadData()
        })
        self.viewModel?.weRecommend.bind({ [weak self] _ in
            self?.customView.searchTable.reloadData()
        })
        self.viewModel?.filteredDataSource.bind({ [weak self] _ in
            self?.customView.searchTable.reloadData()
        })
    }
    
    // MARK: - Action
    
    @objc private func resignKeyboard() {
        self.customView.searchBar1.endEditing(true)
    }

    
}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension BlitzBuchSearchViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if self.viewModel?.searching.value == false {
            return self.viewModel?.weRecommend.value.count ?? 0
        } else {
            return self.viewModel?.filteredDataSource.value.count ?? 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: BookTableViewCell.self), for: indexPath) as! BookTableViewCell
        if let item = self.viewModel?.filteredDataSource.value[indexPath.row] {
        cell.set(with: item, inVipController: false)
        cell.orderButton.rx.tap.subscribe(onNext: {[weak self] in
            if let logedIn = blitzBuchUserDefaults.get(.logedIn) as? Bool{
                var cartItems = blitzBuchUserDefaults.get(.cartItems) as? [String]
                if logedIn == true {
                    self?.navigationController?.view.startActivityIndicator()
                    BooksService.checkLock(bookId: item.id).subscribe { (locked) in
                        if locked == true {
                            if !(cartItems?.contains(String(item.id)) ?? false) {
                                self?.getAlert(errorString: NSLocalizedString("The book is reserved", comment: ""), errorColor: Colors.orange)
                            } else {
                                self?.getAlert(errorString: NSLocalizedString("The book is already in cart", comment: ""), errorColor: Colors.orange)
                            }
                        } else {
                            if item.vip == true {
                                guard let id = blitzBuchUserDefaults.get(.id) as? Int32 else {return}
                                UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                    let vip = vip
                                    if vip > 0 {
                                        self?.updateVipBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: cell.disposeBag)
                                        if !(cartItems?.contains(String(item.id)) ?? false) {
                                            _ = blitzBuchUserDefaults.set(.numberOfVipBooks, value: vip)
                                            self?.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""), errorColor: Colors.blueDefault)
                                            item.locked = LockStatus.locked.rawValue
                                            cartItems?.append(String(item.id))
                                            BooksService.lockBook(bookId: item.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                                let lockedBookId = (String(item.id))
                                                self?.lockedBooks.append(lockedBookId)
                                                var cartBooks = blitzBuchUserDefaults.get(.cartItems) as? [String] ?? [""]
                                                cartBooks.append(lockedBookId)
                                                var newCartBooks = cartBooks
                                                newCartBooks = Array(Set(newCartBooks))
                                                let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                                _ = blitzBuchUserDefaults.set(.cartItems, value: clearBooksArray) as! [String]
                                                UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                    //
                                                } onError: { (error) in
                                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                } onCompleted: {
                                                    //
                                                }.disposed(by: cell.disposeBag)
                                                
                                            } onError: { (error) in
                                                self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                            } onCompleted: {
                                                //
                                            } onDisposed: {
                                                //
                                            }.disposed(by: cell.disposeBag)
                                        } else {
                                            self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                        }
                                        
                                    } else {
                                        if (cartItems?.contains(String(item.id)) ?? false) {
                                            self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                        } else {
                                            self?.getAlert(errorString: NSLocalizedString("You used the limit for vip books", comment: ""), errorColor: Colors.orange)
                                        }
                                    }
                                    
                                    
                                    
                                } onError: { (error) in
                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                } onCompleted: {
                                    //
                                } onDisposed: {
                                    //
                                }.disposed(by: cell.disposeBag)
                            }
                            if item.vip == false {
                                guard let id = blitzBuchUserDefaults.get(.id) as? Int32 else {return}
                                UsersService.checkForAvailableBooks(id).subscribe {(vip, regular) in
                                    let vip = vip
                                    let regular = regular
                                    if regular > 0 {
                                        self?.updateBooksNumber(removeBooks: true, numberOfBooks: 1, disposeBag: cell.disposeBag)
                                        
                                        if !(cartItems?.contains(String(item.id)) ?? false) {
                                            _ = blitzBuchUserDefaults.set(.numberOfRegularBooks, value: regular)
                                            self?.getAlert(errorString: NSLocalizedString("Book is added to cart", comment: ""), errorColor: Colors.blueDefault)
                                            item.locked = LockStatus.locked.rawValue
                                            //                                                cartBook?.inCart = true
                                            cartItems?.append(String(item.id))
                                            BooksService.lockBook(bookId: item.id, lockStatus: .locked).subscribe { [weak self] (finished) in
                                                let lockedBookId = (String(item.id))
                                                self?.lockedBooks.append(lockedBookId)
                                                var cartBooks = blitzBuchUserDefaults.get(.cartItems) as? [String] ?? [""]
                                                cartBooks.append(lockedBookId)
                                                var newCartBooks = cartBooks
                                                newCartBooks = Array(Set(newCartBooks))
                                                let clearBooksArray = newCartBooks.filter({return $0 != ""})
                                                _ = blitzBuchUserDefaults.set(.cartItems, value: clearBooksArray) as! [String]
                                                UsersService.updateCartBooks(userId: id, bookIDs: clearBooksArray).subscribe { (subscribed) in
                                                    //
                                                } onError: { (error) in
                                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                                } onCompleted: {
                                                    //
                                                }.disposed(by: cell.disposeBag)
                                            } onError: { (error) in
                                                self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                            } onCompleted: {
                                                //
                                            } onDisposed: {
                                                //
                                            }.disposed(by: cell.disposeBag)
                                        } else {
                                            self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                        }
                                        
                                    } else {
                                        if (cartItems?.contains(String(item.id)) ?? false) {
                                            self?.getAlert(errorString: NSLocalizedString("Book is already in cart", comment: ""), errorColor: Colors.orange)
                                        } else {
                                            self?.getAlert(errorString: NSLocalizedString("You have used the limit for regular books", comment: ""), errorColor: Colors.orange)
                                        }
                                    }
                                    
                                    
                                    
                                } onError: { (error) in
                                    self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                                } onCompleted: {
                                    //
                                } onDisposed: {
                                    //
                                }.disposed(by: cell.disposeBag)
                            }
                        }
                        self?.navigationController?.view.stopActivityIndicator()
                    } onError: { (error) in
                        self?.getAlert(errorString: error.localizedDescription, errorColor: Colors.orange)
                    } onCompleted: {
                        //
                    } onDisposed: {
                        //
                    }.disposed(by: cell.disposeBag)
                    
                    do {
                        try DataManager.shared.context.save()
                    } catch {
                        self?.getAlert(errorString: "Error saving data", errorColor: Colors.orange)
                    }
                } else {
                    self?.onClick()
                }
            }
        }).disposed(by: cell.disposeBag)
        }
        return cell
    }
}

// MARK: - AlertMe delegate

extension BlitzBuchSearchViewController: AlertMe {
    func onClick() {
    }
    
    func onLoggedOutClick() {
        let alertVC = self.alertService.alert()
        self.present(alertVC, animated: true)
    }
}

// MARK: - SearchBar Delegate

extension BlitzBuchSearchViewController: UISearchResultsUpdating, UISearchBarDelegate {
    func configureSearch(){
        let search = UISearchController(searchResultsController: nil)
        search.searchBar.delegate = self.customView.searchBar1.delegate
    }
    
    func updateSearchResults(for searchController: UISearchController) {
        guard let text = searchController.searchBar.text else {return}
        print(text)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchBar.text != "" {
            self.viewModel?.searching.value = true
            self.customView.sugestionsLabel.alpha = 0
            self.viewModel?.filteredDataSource.value = self.viewModel!.mainFilteredData.value.filter({ (book) -> Bool in
                guard let text = searchBar.text else { return false }
                return (book.title?.uppercased().contains(text.uppercased()))!
            })
        } else {
            if let viewModel = self.viewModel {
            viewModel.searching.value = false
            self.customView.sugestionsLabel.alpha = 1
                viewModel.filteredDataSource.value = viewModel.weRecommend.value
            }
        }
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.endEditing(true)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.endEditing(true)
    }
}

// MARK: - Actions

extension BlitzBuchSearchViewController {
    @objc func presentLoginView(){
        let vc = LoginViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
    
    @objc func presentRegisterView(){
        let vc = RegisterViewController.get()
        vc.modalPresentationStyle = .formSheet
        self.present(vc, animated: true, completion: nil)
    }
}



