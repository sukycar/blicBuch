//
//  BlitzBuchSearchViewModel.swift
//  blitzBuch
//
//  Created by Vladimir Sukanica on 17.7.21..
//  Copyright (c) 2021 Vladimir Sukanica. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol BlitzBuchSearchViewModelProtocol {
    var dataSource: Dynamic<[Book]> { get set }
    var mainFilteredData: Dynamic<[Book]> { get set }
    var filteredDataSource: Dynamic<[Book]> { get set }
    var weRecommend: Dynamic<[Book]> { get set }
    var resultsSearchController: UISearchController { get set }
    var searching: Dynamic<Bool> { get set }
    var fetchResults: NSFetchedResultsController<NSManagedObject>? { get set }
    
    func fetch()
    func fetchRecommendedBooks()
}

class BlitzBuchSearchViewModel: BaseViewModel, BlitzBuchSearchViewModelProtocol, NSFetchedResultsControllerDelegate {
    
    // MARK: - BlitzBuchSearchViewModelProtocol Vars & Lets
    
    var dataSource = Dynamic<[Book]>([])
    var mainFilteredData = Dynamic<[Book]>([])
    var filteredDataSource = Dynamic<[Book]>([])
    var context = DataManager.shared.context
    var weRecommend = Dynamic<[Book]>([])
    var resultsSearchController = UISearchController()
    var searching = Dynamic(false)
    var fetchResults: NSFetchedResultsController<NSManagedObject>?
    
    // MARK: - Init
    
    override init() {
        super.init()
    }
    
    // MARK: - BlitzBuchSearchViewModelProtocol Methods

    func fetch(){
        let fetchRequest: NSFetchRequest<Book> = Book.fetchRequest()
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: "id", ascending: false)]
        let fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: DataManager.shared.context, sectionNameKeyPath: nil, cacheName: nil)
        fetchedResultsController.delegate = self
        self.fetchResults = fetchedResultsController as? NSFetchedResultsController<NSManagedObject>
        try! fetchResults?.performFetch()
        dataSource.value = fetchResults?.fetchedObjects as! [Book]
        
    }
    
    func fetchRecommendedBooks(){
        let request = Book.fetchRequest() as NSFetchRequest
        let predicate = NSPredicate(format: "weRecommend == true")
        request.predicate = predicate
        do {
            if let fetchedBooks = try context?.fetch(request){
                self.weRecommend.value = fetchedBooks
            }
        } catch {
            print("Books not fetched")
        }
    }
}

